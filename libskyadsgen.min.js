{
	// Utility function to generate a random hash-like string
	let o = (t) => {
			let o = "";
			for (let e = 0; e < t; e++)
				o +=
					"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"[
						0 | Math.floor(62 * Math.random())
					] || "";
			return o;
		},
		e = o(8),
		n = "modal-" + e,
		s = "modal-content-" + e,
		r = "close-" + e,
		c = "myModal-" + e,
		{ modal: l, closeButton: t } = (() => {
			var e = document.createElement("style");
			e.textContent = `
		.${n} {
			display: none;
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: transparent;
			justify-content: center;
			align-items: center;
			z-index: 1000;
		}

		.${s} {
			background: #000;
			padding: 0;
			width: 100%;
			height: 100%;
			box-sizing: border-box;
			display: flex;
			justify-content: center;
			align-items: center;
			overflow: hidden;
			flex-direction: column;
			position: relative;
		}

		.${r} {
			text-shadow: 0 0 3px #000;
			font-weight: bold;
			position: fixed;
			top: 20px;
			right: 20px;
			font-size: 35px;
			color: white;
			z-index: 1001;
			border-radius: 50%;
		}

		.countdown {
			text-shadow: 0 0 3px #000;
			position: fixed;
			top: 20px;
			right: 20px;
			font-size: 20px;
			color: white;
			z-index: 1001;
		}

		.${s} video {
			width: 100%;
			height: 100%;
			object-fit: cover;
			flex-grow: 1;
		}

		.modal-footer {
			background-color: #000;
			width: 100%;
			text-align: center;
			padding: 10px;
			color: #fff;
			font-size: 14px;
			position: absolute;
			bottom: 0;
			left: 0;
		}

		.slideshow-container {
			position: relative;
			width: 100%;
			height: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
			background-color: black;
		}

		.slideshow-container img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}
		`;
			document.head.appendChild(e);
			let l = document.createElement("div");
			l.id = c;
			l.className = n;
			e = document.createElement("div");
			e.className = s;
			let i = document.createElement("span");
			i.className = r;
			i.innerHTML = "&times;";
			i.style.display = "none"; // Hide the close button initially
			let a = document.createElement("span");
			a.className = "countdown";
			a.style.display = "none"; // Hide the countdown initially
			let d = document.createElement("div");
			d.id = "modalBody-" + o(8);
			var t = document.createElement("div");
			t.className = "modal-footer";
			t.textContent = "Powered by Sky Ads";
			e.appendChild(i);
			e.appendChild(a);
			e.appendChild(d);
			l.appendChild(e);
			l.appendChild(t);
			document.body.appendChild(l);
			// Return modal components with alias
			return {
				modal: {
					element: l,
					open: (e, t) => {
						// Check if the ad has already been shown
						var o = localStorage.getItem("adShown");
						// Set the content
						d.innerHTML = e;
						l.style.display = "flex";
						let n = t;
						if (o) {
							// Skip countdown if ad has already been shown
							i.style.display = "block";
							a.style.display = "none";
						} else {
							// Show the countdown if the ad hasn't been shown
							a.textContent = n + "s";
							a.style.display = "block";
							i.style.display = "none";
							let e = setInterval(() => {
								--n;
								a.textContent = n + "s";
								if (n <= 0) {
									clearInterval(e);
									a.style.display = "none";
									i.style.display = "block";
									// Mark the ad as shown
									localStorage.setItem("adShown", "true");
								}
							}, 1e3);
						}
					},
					close: () => {
						l.style.display = "none";
						a.style.display = "none";
						i.style.display = "none";
					},
				},
				content: d,
				closeButton: i,
				countdown: a,
			};
		})(),
		i = async (o) => {
			try {
				if (!document.querySelector('script[data-name*="skyadsgen"]')?.getAttribute("data-key"))
					throw Error("API key is missing.");
				// Display the advertisements based on type
				if ("video" === o.type)
					l.open(
						`
  <video src="${o.content}" autoplay loop muted=false>
    Your browser does not support the video tag.
  </video>
`,
						o.duration
					);
				else if ("image" === o.type) {
					l.open(
						`
	 <div class="slideshow-container">
						${o.content
							.map(
								(e, t) =>
									`<img class="slide" src="${e}" style="display: ${0 === t ? "block" : "none"};">`
							)
							.join("")}
				</div>
`,
						o.duration
					);
					let e = 0,
						t = document.querySelectorAll(".slide");
					// Automatically switch slides every 3 seconds
					setInterval(() => {
						e = (e + 1) % t.length;
						(o = e),
							t.forEach((e, t) => {
								e.style.display = t === o ? "block" : "none";
							});
						var o;
					}, 3e3);
				}
			} catch (e) {
				console.error("There was a problem with the fetch operation:", e);
			}
		};
	// Generate unique class and ID names
	// Polling function to continuously request data from the API
	// const startPolling = (interval) => {
	// 	showAdvertisement(); // Initial call to fetch data
	// 	// Set interval to repeatedly fetch data
	// 	setInterval(() => {
	// 		showAdvertisement();
	// 	}, interval);
	// };
	// // Start polling every 15 seconds (15000 milliseconds)
	// startPolling(15000);
	// Handle page visibility change
	document.addEventListener("visibilitychange", () => {
		"visible" === document.visibilityState && i();
	});
	// Event listener for the close button
	t.addEventListener("click", () => {
		l.close();
		localStorage.removeItem("adShown");
	});
	var a = document.querySelector('script[data-name*="skyadsgen"]')?.getAttribute("data-key"),
		a = new WebSocket("ws://localhost:7575?key=" + a); // Replace with your WebSocket server URL
	// const socket = new WebSocket(`https://cams-api.cloudmateria.com?key=${apiKey}`); // Replace with your WebSocket server URL
	a.onopen = () => {
		console.log("Connected to the WebSocket server");
	};
	a.onmessage = (e) => {
		e = JSON.parse(e.data);
		console.log("Received new advertisement:", e);
		console.log(e);
		i(e);
	};
	a.onerror = (e) => {
		console.error("WebSocket error:", e);
	};
	// Event listener for the close button
	t.addEventListener("click", () => {
		l.close();
	});
	// Expose the showAdvertisement function globally for manual triggering
	window.showAdvertisementManually = i;
}
