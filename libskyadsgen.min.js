const generateHash=length=>{const chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let result="";for(let i=0;i<length;i++)result+=chars.charAt(Math.floor(Math.random()*chars.length));return result},modalAlias=generateHash(8),modalClass=`modal-${modalAlias}`,modalContentClass=`modal-content-${modalAlias}`,closeButtonClass=`close-${modalAlias}`,modalId=`myModal-${modalAlias}`,createModal=()=>{const style=document.createElement("style");style.textContent=`\n            /* Basic styling for the modal */\n            .${modalClass} {\n                display: none;\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.5);\n                justify-content: center;\n                align-items: center;\n                z-index: 1000;\n            }\n            \n            /* Fullscreen modal content */\n            .${modalContentClass} {\n                border: 1px solid red;\n                background: #fff;\n                padding: 0px;\n                width: 100%;\n                height: 100%;\n                object-fit: contain;\n                overflow: hidden;\n                max-width: none; /* Remove any max-width limit */\n                max-height: none; /* Remove any max-height limit */\n                box-sizing: border-box; /* Include padding and border in element's total width and height */\n                overflow: hidden; /* Allow scrolling if content overflows */\n                position: relative;\n                display: flex;\n                justify-content: center; \n                align-items: center;\n            }\n            \n            /* Styling for the close button */\n            .${closeButtonClass} {\n                position: fixed; /* Absolute relative to the viewport */\n                top: 20px;\n                right: 20px;\n                cursor: pointer;\n                font-size: 30px;\n                color: #000;\n                z-index: 1001; /* Ensure the button is above the modal content */\n                padding: 5px; /* Optional: Add some padding around the button */\n                border-radius: 50%; /* Optional: Make the button round */\n            }\n        `,document.head.appendChild(style);const modal=document.createElement("div");modal.id=modalId,modal.className=modalClass;const modalContent=document.createElement("div");modalContent.className=modalContentClass;const closeButton=document.createElement("span");closeButton.className=closeButtonClass,closeButton.innerHTML="&times;",closeButton.style.display="none";const content=document.createElement("div");return content.id=`modalBody-${generateHash(8)}`,modalContent.appendChild(closeButton),modalContent.appendChild(content),modal.appendChild(modalContent),document.body.appendChild(modal),{modal:{element:modal,open:modalContent=>{content.innerHTML=modalContent,modal.style.display="flex",setTimeout(()=>{closeButton.style.display="block"},5e3)},close:()=>{modal.style.display="none"}},content:content,closeButton:closeButton}},{modal:modal,content:content,closeButton:closeButton}=createModal(),handleApiResponse=async()=>{try{console.log("adasd"),modal.open('\n        <video src="./video.mp4" autoplay muted=false>\n          Your browser does not support the video tag.\n        </video>\n      ')}catch(error){console.error("There was a problem with the fetch operation:",error)}},startPolling=interval=>{handleApiResponse(),setInterval(()=>{handleApiResponse()},interval)};startPolling(15e3),closeButton.addEventListener("click",()=>{modal.close()});